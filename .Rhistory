View(lm_surface)
lm_surface$y <- predict.lm(lm, newdata = lm_surface)
View(lm_surface)
lm_surface <- acast(lm_surface,
as.formula(paste0(input$x1, " ~ ", input$x2),
value.var = input$y))
lm_surface <- acast(lm_surface,
as.formula(paste0(input$x1, " ~ ", input$x2)),
value.var = input$y)
View(lm_surface)
lm_surface[, input$y] <- predict.lm(lm, newdata = lm_surface)
View(lm_surface)
lm <- lm(as.formula(paste0(input$y, " ~ ", input$x1, " + ", input$x2)), data)
axis_x <- seq(0, 5, by = 0.2)
axis_y <- seq(0, 10, by = 0.2)
lm_surface <- expand.grid(x1 = axis_x, x2 = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x1, input$x2)
lm_surface[, input$y] <- predict.lm(lm, newdata = lm_surface)
View(lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x1, " ~ ", input$x2)),
value.var = input$y)
View(lm_surface)
runApp()
?plot_ly
runApp()
axis_x_max <- data %>%
select(input$x1) %>%
max()
axis_x_max <- data %>%
select(input$x1) %>%
mean()
axis_x_max <- data %>%
select(input$x1) %>%
mean(., na.rm = T)
max(data[, input$x1])
max(data[, input$x1], na.rm = T)
axis_x <- seq(min(data[, input$x1], na.rm = T),
max(data[, input$x1], na.rm = T), seq = 0.2)
axis_x
axis_x <- seq(min(data[, input$x1], na.rm = T),
max(data[, input$x1], na.rm = T), by = 0.2)
axis_x
runApp()
lm <- lm(as.formula(paste0(input$y, " ~ ", input$x1, " + ", input$x2)), data)
axis_x <- seq(min(data[, input$x1], na.rm = T),
max(data[, input$x1], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$x2], na.rm = T),
max(data[, input$x2], na.rm = T), by = 0.2)
lm <- lm(as.formula(paste0(input$y, " ~ ", input$x1, " + ", input$x2)), data)
axis_x <- seq(min(data[, input$x1], na.rm = T),
max(data[, input$x1], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$x2], na.rm = T),
max(data[, input$x2], na.rm = T), by = 0.2)
lm_surface <- expand.grid(x1 = axis_x, x2 = axis_y, KEEP.OUT.ATTRS = F)
View(lm_surface)
colnames(lm_surface) <- c(input$x1, input$x2)
lm_surface[, input$y] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x1, " ~ ", input$x2)),
value.var = input$y)
View(lm_surface)
data %>% plot_ly(., x = ~get(input$x1),
y = ~get(input$x2),
z = ~get(input$y),
type = "scatter3d",
mode = "markers",
list(size = 4, color = "#cccccc")) %>%
add_trace(z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>% plot_ly(., x = ~get(input$x1),
y = ~get(input$x2),
z = ~get(input$y),
type = "scatter3d",
mode = "markers",
list(size = 4, color = "#cccccc"))
axis_y <- seq(0, 10, by = 0.2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(input)
input <- list()
input$y = "political_interest"
input$x = "education_level"
input$z = "political_trust"
lm <- lm(as.formula(paste0(input$z, " ~ ", input$x, " + ", input$y)), data)
lm
axis_x <- seq(min(data[, input$x], na.rm = T),
max(data[, input$x], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$y], na.rm = T),
max(data[, input$y], na.rm = T), by = 0.2)
axis_x
axis_y
input$z = "political_interest"
> input$x = "education_level"
> input$y = "political_trust"
input$z = "political_interest"
input$x = "education_level"
input$y = "political_trust"
axis_x <- seq(min(data[, input$x], na.rm = T),
max(data[, input$x], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$y], na.rm = T),
max(data[, input$y], na.rm = T), by = 0.2)
axis_x
axis_y
expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
View(lm_surface)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
predict.lm(lm, newdata = lm_surface)
summary(lm)
lm <- lm(as.formula(paste0(input$z, " ~ ", input$x, " + ", input$y)), data)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
View(lm_surface)
data %>% plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
data %>% plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc")) %>%
add_trace(z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>% plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", # mode = "markers",
marker = list(size = 4, color = "#cccccc")) %>%
add_trace(z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>% plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~get(input$x), y = ~get(input$y), z = ~get(input$z),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc")) %>%
add_trace(z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x)), y = ~jitter(get(input$y)),
z = ~jitter(get(input$z)),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc")) %>%
add_trace(z = lm_surface,
x = axis_y,
y = axis_x,
type = "surface")
plot <- data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc"))
add_trace(p = plot,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
add_line(p = plot,
z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 4, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface$political_interest,
x = lm_surface$education_level,
y = lm_surface$political_trust,
type = "surface")
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
axis_x <- seq(0, 1, by = 0.2)
axis_y <- seq(0, 1, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
axis_x <- seq(0, 15, by = 0.2)
axis_y <- seq(0, 15, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
View(lm_surface)
View(lm_surface)
axis_x <- seq(0, 15, by = 0.2)
axis_y <- seq(0, 15, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
?acast
as.formula(paste0(input$x, " ~ ", input$y)
)
input$z
lm_surface <- acast(lm_surface, education_level ~ political_trust,
value.var = "political_interest")
View(lm_surface)
dim(lm_surface)
9.8/0.2
lm_surface
axis_x <- seq(0, 10, by = 0.2)
axis_y <- seq(0, 10, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
View(lm_surface)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
axis_x <- seq(0, 5, by = 0.2)
axis_y <- seq(0, 10, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
axis_x <- seq(0, 10, by = 0.2)
axis_y <- seq(0, 5, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_trace(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
?add_trace
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_surface(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
axis_x <- seq(0, 10, by = 0.2)
axis_y <- seq(0, 10, by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_surface(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data_sample <- sample_n(data, 100)
dput(data_sample)
data <- sample_n(data, 100)
lm <- lm(as.formula(paste0(input$z, " ~ ", input$x, " + ", input$y)), data)
axis_x <- seq(min(data[, input$x], na.rm = T),
max(data[, input$x], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$y], na.rm = T),
max(data[, input$y], na.rm = T), by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_surface(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
data <- read.dta("/Users/bernhardclemm/Dropbox/PhD/Apps/role-of-randomization-shiny/bes_f2f_2017_v1.3.dta")
data %<>% mutate(political_interest = case_when(a03 == "Not at all interested" ~ 0,
a03 == "Not very interested" ~ 1,
a03 == "Fairly interested" ~ 2,
a03 == "Very interested" ~ 3)) %>%
mutate(political_trust = case_when(n03 == "0 No trust" ~ 0,
n03 == "1" ~ 1,
n03 == "2" ~ 2,
n03 == "3" ~ 3,
n03 == "4" ~ 4,
n03 == "5" ~ 5,
n03 == "6" ~ 6,
n03 == "7" ~ 7,
n03 == "8" ~ 8,
n03 == "9" ~ 9,
n03 == "10 A great deal of trust" ~ 10)) %>%
mutate(read_newspapers = factor(k02, ordered = TRUE, levels = c("No", "Yes"))) %>%
mutate(canvassed = factor(k11, ordered = TRUE, levels = c("No", "Yes"))) %>%
mutate(education_level = case_when(edlevel == "No qualifications" ~ 0,
edlevel == "Below GCSE" ~ 1,
edlevel == "GCSE" ~ 2,
edlevel == "A-level" ~ 3,
edlevel == "Undergraduate" ~ 4,
edlevel == "Postgrad" ~ 5)) %>%
mutate(age = as.numeric(Age)) %>%
mutate(age = ifelse(age == -2, NA, age)) %>%
mutate(ideology = case_when(e01 == "Not stated" |
e01 == "Refused" |
e01 == "Don`t know" ~ "NA",
e01 == "0 Left"  ~ "0",
e01 == "10 Right" ~ "10",
TRUE ~ as.character(e01))) %>%
mutate(ideology = as.numeric(as.character(ideology))) %>%
select(political_interest, political_trust, read_newspapers,
canvassed, education_level, age, ideology)
data <- sample_n(data, 200)
dput(data)
data <- sample_n(data, 200) %>%
select(political_trust, political_interest, education_level)
dput(data)
input
lm <- lm(as.formula(paste0(input$z, " ~ ", input$x, " + ", input$y)), data)
axis_x <- seq(min(data[, input$x], na.rm = T),
max(data[, input$x], na.rm = T), by = 0.2)
axis_y <- seq(min(data[, input$y], na.rm = T),
max(data[, input$y], na.rm = T), by = 0.2)
lm_surface <- expand.grid(x = axis_x, y = axis_y, KEEP.OUT.ATTRS = F)
colnames(lm_surface) <- c(input$x, input$y)
lm_surface[, input$z] <- predict.lm(lm, newdata = lm_surface)
lm_surface <- acast(lm_surface, as.formula(paste0(input$x, " ~ ", input$y)),
value.var = input$z)
data %>%
filter(!is.na(get(input$z))) %>%
filter(!is.na(get(input$x))) %>%
filter(!is.na(get(input$y))) %>%
plot_ly(., x = ~jitter(get(input$x), factor = 2.5),
y = ~jitter(get(input$y), factor = 2.5),
z = ~jitter(get(input$z), factor = 2.5),
type = "scatter3d", mode = "markers",
marker = list(size = 2, color = "#cccccc")) %>%
add_surface(., z = lm_surface,
x = axis_x,
y = axis_y,
type = "surface")
runApp()
